# %%
import pandas as pd
import numpy as np
import requests, json
import os
from tqdm import tqdm


def get_bls_location_codes():
    data = [
        # Country
        ("0000", "U.S. city average", "country"),
        # Regions
        ("0100", "Northeast", "region"),
        ("0110", "New England", "region"),
        ("0120", "Middle Atlantic", "region"),
        ("0200", "Midwest", "region"),
        ("0230", "East North Central", "region"),
        ("0240", "West North Central", "region"),
        ("0300", "South", "region"),
        ("0350", "South Atlantic", "region"),
        ("0360", "East South Central", "region"),
        ("0370", "West South Central", "region"),
        ("0400", "West", "region"),
        ("0480", "Mountain", "region"),
        ("0490", "Pacific", "region"),
        # CBSAs
        ("A104", "Pittsburgh, PA", "cbsa"),
        ("A210", "Cleveland-Akron, OH", "cbsa"),
        ("A212", "Milwaukee-Racine, WI", "cbsa"),
        ("A213", "Cincinnati-Hamilton, OH-KY-IN", "cbsa"),
        ("A214", "Kansas City, MO-KS", "cbsa"),
        ("A311", "Washington-Baltimore, DC-MD-VA-WV", "cbsa"),
        ("A421", "Los Angeles-Riverside-Orange County, CA", "cbsa"),
        ("A425", "Portland-Salem, OR-WA", "cbsa"),
        ("S11A", "Boston-Cambridge-Newton, MA-NH", "cbsa"),
        ("S12A", "New York-Newark-Jersey City, NY-NJ-PA", "cbsa"),
        ("S12B", "Philadelphia-Camden-Wilmington, PA-NJ-DE-MD", "cbsa"),
        ("S23A", "Chicago-Naperville-Elgin, IL-IN-WI", "cbsa"),
        ("S23B", "Detroit-Warren-Dearborn, MI", "cbsa"),
        ("S24A", "Minneapolis-St.Paul-Bloomington, MN-WI", "cbsa"),
        ("S24B", "St. Louis, MO-IL", "cbsa"),
        ("S35A", "Washington-Arlington-Alexandria, DC-VA-MD-WV", "cbsa"),
        ("S35B", "Miami-Fort Lauderdale-West Palm Beach, FL", "cbsa"),
        ("S35C", "Atlanta-Sandy Springs-Roswell, GA", "cbsa"),
        ("S35D", "Tampa-St. Petersburg-Clearwater, FL", "cbsa"),
        ("S35E", "Baltimore-Columbia-Towson, MD", "cbsa"),
        ("S37A", "Dallas-Fort Worth-Arlington, TX", "cbsa"),
        ("S37B", "Houston-The Woodlands-Sugar Land, TX", "cbsa"),
        ("S48A", "Phoenix-Mesa-Scottsdale, AZ", "cbsa"),
        ("S48B", "Denver-Aurora-Lakewood, CO", "cbsa"),
        ("S49A", "Los Angeles-Long Beach-Anaheim, CA", "cbsa"),
        ("S49B", "San Francisco-Oakland-Hayward, CA", "cbsa"),
        ("S49C", "Riverside-San Bernardino-Ontario, CA", "cbsa"),
        ("S49D", "Seattle-Tacoma-Bellevue, WA", "cbsa"),
        ("S49E", "San Diego-Carlsbad, CA", "cbsa"),
        ("S49F", "Urban Hawaii", "cbsa"),
        ("S49G", "Urban Alaska", "cbsa"),
    ]

    df = pd.DataFrame(data, columns=["code", "area_name", "area_type"])
    return df


def get_bls_item_codes():
    data = [
        ("AA0", "All items - old base"),
        ("AA0R", "Purchasing power of the consumer dollar - old base"),
        ("SA0", "All items"),
        ("SA0E", "Energy"),
        ("SA0L1", "All items less food"),
        ("SA0L12", "All items less food and shelter"),
        ("SA0L12E", "All items less food, shelter, and energy"),
        ("SA0L12E4", "All items less food, shelter, energy, and used cars and trucks"),
        ("SA0L1E", "All items less food and energy"),
        ("SA0L2", "All items less shelter"),
        ("SA0L5", "All items less medical care"),
        ("SA0LE", "All items less energy"),
        ("SA0R", "Purchasing power of the consumer dollar"),
        ("SA311", "Apparel less footwear"),
        ("SAA", "Apparel"),
        ("SAA1", "Men's and boys' apparel"),
        ("SAA2", "Women's and girls' apparel"),
        ("SAC", "Commodities"),
        ("SACE", "Energy commodities"),
        ("SACL1", "Commodities less food"),
        ("SACL11", "Commodities less food and beverages"),
        ("SACL1E", "Commodities less food and energy commodities"),
        ("SACL1E4", "Commodities less food, energy, and used cars and trucks"),
        ("SAD", "Durables"),
        ("SAE", "Education and communication"),
        ("SAE1", "Education"),
        ("SAE2", "Communication"),
        ("SAE21", "Information and information processing"),
        ("SAEC", "Education and communication commodities"),
        ("SAES", "Education and communication services"),
        ("SAF", "Food and beverages"),
        ("SAF1", "Food"),
        ("SAF11", "Food at home"),
        ("SAF111", "Cereals and bakery products"),
        ("SAF112", "Meats, poultry, fish, and eggs"),
        ("SAF1121", "Meats, poultry, and fish"),
        ("SAF11211", "Meats"),
        ("SAF113", "Fruits and vegetables"),
        ("SAF1131", "Fresh fruits and vegetables"),
        ("SAF114", "Nonalcoholic beverages and beverage materials"),
        ("SAF115", "Other food at home"),
        ("SAF116", "Alcoholic beverages"),
        ("SAG", "Other goods and services"),
        ("SAG1", "Personal care"),
        ("SAGC", "Other goods"),
        ("SAGS", "Other personal services"),
        ("SAH", "Housing"),
        ("SAH1", "Shelter"),
        ("SAH2", "Fuels and utilities"),
        ("SAH21", "Household energy"),
        ("SAH3", "Household furnishings and operations"),
        ("SAH31", "Household furnishings and supplies"),
        ("SAM", "Medical care"),
        ("SAM1", "Medical care commodities"),
        ("SAM2", "Medical care services"),
        ("SAN", "Nondurables"),
        ("SAN1D", "Domestically produced farm food"),
        ("SANL1", "Nondurables less food"),
        ("SANL11", "Nondurables less food and beverages"),
        ("SANL113", "Nondurables less food, beverages, and apparel"),
        ("SANL13", "Nondurables less food and apparel"),
        ("SAR", "Recreation"),
        ("SARC", "Recreation commodities"),
        ("SARS", "Recreation services"),
        ("SAS", "Services"),
        ("SAS24", "Utilities and public transportation"),
        ("SAS2RS", "Rent of shelter"),
        ("SAS367", "Other services"),
        ("SAS4", "Transportation services"),
        ("SASL2RS", "Services less rent of shelter"),
        ("SASL5", "Services less medical care services"),
        ("SASLE", "Services less energy services"),
        ("SAT", "Transportation"),
        ("SAT1", "Private transportation"),
        ("SATCLTB", "Transportation commodities less motor fuel"),
        ("SEAA", "Men's apparel"),
        ("SEAA01", "Men's suits, sport coats, and outerwear"),
        ("SEAA02", "Men's underwear, nightwear, swimwear and accessories"),
        ("SEAA03", "Men's shirts and sweaters"),
        ("SEAA04", "Men's pants and shorts"),
        ("SEAB", "Boys' apparel"),
        ("SEAC", "Women's apparel"),
        ("SEAC01", "Women's outerwear"),
        ("SEAC02", "Women's dresses"),
        ("SEAC03", "Women's suits and separates"),
        ("SEAC04", "Women's underwear, nightwear, swimwear and accessories"),
        ("SEAD", "Girls' apparel"),
        ("SEAE", "Footwear"),
        ("SEAE01", "Men's footwear"),
        ("SEAE02", "Boys' and girls' footwear"),
        ("SEAE03", "Women's footwear"),
        ("SEAF", "Infants' and toddlers' apparel"),
        ("SEAG", "Jewelry and watches"),
        ("SEAG01", "Watches"),
        ("SEAG02", "Jewelry"),
        ("SEEA", "Educational books and supplies"),
        ("SEEB", "Tuition, other school fees, and childcare"),
        ("SEEB01", "College tuition and fees"),
        ("SEEB02", "Elementary and high school tuition and fees"),
        ("SEEB03", "Day care and preschool"),
        ("SEEB04", "Technical and business school tuition and fees"),
        ("SEEC", "Postage and delivery services"),
        ("SEEC01", "Postage"),
        ("SEEC02", "Delivery services"),
        ("SEED", "Telephone services"),
        ("SEED03", "Wireless telephone services"),
        ("SEED04", "Residential telephone services"),
        ("SEEE", "Information technology, hardware and services"),
        ("SEEE01", "Computers, peripherals, and smart home assistants"),
        ("SEEE02", "Computer software and accessories"),
        ("SEEE03", "Internet services and electronic information providers"),
        (
            "SEEE04",
            "Telephone hardware, calculators, and other consumer information items",
        ),
        ("SEEEC", "Information technology commodities"),
        ("SEFA", "Cereals and cereal products"),
        ("SEFA01", "Flour and prepared flour mixes"),
        ("SEFA02", "Breakfast cereal"),
        ("SEFA03", "Rice, pasta, cornmeal"),
        ("SEFB", "Bakery products"),
        ("SEFB01", "Bread"),
        ("SEFB02", "Fresh biscuits, rolls, muffins"),
        ("SEFB03", "Cakes, cupcakes, and cookies"),
        ("SEFB04", "Other bakery products"),
        ("SEFC", "Beef and veal"),
        ("SEFC01", "Uncooked ground beef"),
        ("SEFC02", "Uncooked beef roasts"),
        ("SEFC03", "Uncooked beef steaks"),
        ("SEFC04", "Uncooked other beef and veal"),
        ("SEFD", "Pork"),
        ("SEFD01", "Bacon, breakfast sausage, and related products"),
        ("SEFD02", "Ham"),
        ("SEFD03", "Pork chops"),
        ("SEFD04", "Other pork including roasts, steaks, and ribs"),
        ("SEFE", "Other meats"),
        ("SEFF", "Poultry"),
        ("SEFF01", "Chicken"),
        ("SEFF02", "Other uncooked poultry including turkey"),
        ("SEFG", "Fish and seafood"),
        ("SEFG01", "Fresh fish and seafood"),
        ("SEFG02", "Processed fish and seafood"),
        ("SEFH", "Eggs"),
        ("SEFJ", "Dairy and related products"),
        ("SEFJ01", "Milk"),
        ("SEFJ02", "Cheese and related products"),
        ("SEFJ03", "Ice cream and related products"),
        ("SEFJ04", "Other dairy and related products"),
        ("SEFK", "Fresh fruits"),
        ("SEFK01", "Apples"),
        ("SEFK02", "Bananas"),
        ("SEFK03", "Citrus fruits"),
        ("SEFK04", "Other fresh fruits"),
        ("SEFL", "Fresh vegetables"),
        ("SEFL01", "Potatoes"),
        ("SEFL02", "Lettuce"),
        ("SEFL03", "Tomatoes"),
        ("SEFL04", "Other fresh vegetables"),
        ("SEFM", "Processed fruits and vegetables"),
        ("SEFM01", "Canned fruits and vegetables"),
        ("SEFM02", "Frozen fruits and vegetables"),
        ("SEFM03", "Other processed fruits and vegetables including dried"),
        ("SEFN", "Juices and nonalcoholic drinks"),
        ("SEFN01", "Carbonated drinks"),
        ("SEFN02", "Frozen noncarbonated juices and drinks"),
        ("SEFN03", "Nonfrozen noncarbonated juices and drinks"),
        ("SEFP", "Beverage materials including coffee and tea"),
        ("SEFP01", "Coffee"),
        ("SEFP02", "Other beverage materials including tea"),
        ("SEFR", "Sugar and sweets"),
        ("SEFR01", "Sugar and sugar substitutes"),
        ("SEFR02", "Candy and chewing gum"),
        ("SEFR03", "Other sweets"),
        ("SEFS", "Fats and oils"),
        ("SEFS01", "Butter and margarine"),
        ("SEFS02", "Salad dressing"),
        ("SEFS03", "Other fats and oils including peanut butter"),
        ("SEFT", "Other foods"),
        ("SEFT01", "Soups"),
        ("SEFT02", "Frozen and freeze dried prepared foods"),
        ("SEFT03", "Snacks"),
        ("SEFT04", "Spices, seasonings, condiments, sauces"),
        ("SEFT05", "Baby food and formula"),
        ("SEFT06", "Other miscellaneous foods"),
        ("SEFV", "Food away from home"),
        ("SEFV01", "Full service meals and snacks"),
        ("SEFV02", "Limited service meals and snacks"),
        ("SEFV03", "Food at employee sites and schools"),
        ("SEFV04", "Food from vending machines and mobile vendors"),
        ("SEFV05", "Other food away from home"),
        ("SEFW", "Alcoholic beverages at home"),
        ("SEFW01", "Beer, ale, and other malt beverages at home"),
        ("SEFW02", "Distilled spirits at home"),
        ("SEFW03", "Wine at home"),
        ("SEFX", "Alcoholic beverages away from home"),
        ("SEGA", "Tobacco and smoking products"),
        ("SEGA01", "Cigarettes"),
        ("SEGA02", "Tobacco products other than cigarettes"),
        ("SEGB", "Personal care products"),
        ("SEGB01", "Hair, dental, shaving, and miscellaneous personal care products"),
        ("SEGB02", "Cosmetics, perfume, bath, nail preparations and implements"),
        ("SEGC", "Personal care services"),
        ("SEGC01", "Haircuts and other personal care services"),
        ("SEGD", "Miscellaneous personal services"),
        ("SEGD01", "Legal services"),
        ("SEGD02", "Funeral expenses"),
        ("SEGD03", "Laundry and dry cleaning services"),
        ("SEGD04", "Apparel services other than laundry and dry cleaning"),
        ("SEGD05", "Financial services"),
        ("SEGE", "Miscellaneous personal goods"),
        ("SEHA", "Rent of primary residence"),
        ("SEHB", "Lodging away from home"),
        ("SEHB01", "Housing at school, excluding board"),
        ("SEHB02", "Other lodging away from home including hotels and motels"),
        ("SEHC", "Owners' equivalent rent of residences"),
        ("SEHC01", "Owners' equivalent rent of primary residence"),
        ("SEHD", "Tenants' and household insurance"),
        ("SEHE", "Fuel oil and other fuels"),
        ("SEHE01", "Fuel oil"),
        ("SEHE02", "Propane, kerosene, and firewood"),
        ("SEHF", "Energy services"),
        ("SEHF01", "Electricity"),
        ("SEHF02", "Utility (piped) gas service"),
        ("SEHG", "Water and sewer and trash collection services"),
        ("SEHG01", "Water and sewerage maintenance"),
        ("SEHG02", "Garbage and trash collection"),
        ("SEHH", "Window and floor coverings and other linens"),
        ("SEHH01", "Floor coverings"),
        ("SEHH02", "Window coverings"),
        ("SEHH03", "Other linens"),
        ("SEHJ", "Furniture and bedding"),
        ("SEHJ01", "Bedroom furniture"),
        ("SEHJ02", "Living room, kitchen, and dining room furniture"),
        ("SEHJ03", "Other furniture"),
        ("SEHK", "Appliances"),
        ("SEHK01", "Major appliances"),
        ("SEHK02", "Other appliances"),
        ("SEHL", "Other household equipment and furnishings"),
        ("SEHL01", "Clocks, lamps, and decorator items"),
        ("SEHL02", "Indoor plants and flowers"),
        ("SEHL03", "Dishes and flatware"),
        ("SEHL04", "Nonelectric cookware and tableware"),
        ("SEHM", "Tools, hardware, outdoor equipment and supplies"),
        ("SEHM01", "Tools, hardware and supplies"),
        ("SEHM02", "Outdoor equipment and supplies"),
        ("SEHN", "Housekeeping supplies"),
        ("SEHN01", "Household cleaning products"),
        ("SEHN02", "Household paper products"),
        ("SEHN03", "Miscellaneous household products"),
        ("SEHP", "Household operations"),
        ("SEHP01", "Domestic services"),
        ("SEHP02", "Gardening and lawncare services"),
        ("SEHP03", "Moving, storage, freight expense"),
        ("SEHP04", "Repair of household items"),
        ("SEMC", "Professional services"),
        ("SEMC01", "Physicians' services"),
        ("SEMC02", "Dental services"),
        ("SEMC03", "Eyeglasses and eye care"),
        ("SEMC04", "Services by other medical professionals"),
        ("SEMD", "Hospital and related services"),
        ("SEMD01", "Hospital services"),
        ("SEMD02", "Nursing homes and adult day services"),
        ("SEMD03", "Care of invalids and elderly at home"),
        ("SEME", "Health insurance"),
        ("SEMF", "Medicinal drugs"),
        ("SEMF01", "Prescription drugs"),
        ("SEMF02", "Nonprescription drugs"),
        ("SEMG", "Medical equipment and supplies"),
        ("SERA", "Video and audio"),
        ("SERA01", "Televisions"),
        ("SERA02", "Cable, satellite, and live streaming television service"),
        ("SERA03", "Other video equipment"),
        ("SERA04", "Purchase, subscription, and rental of video"),
        ("SERA05", "Audio equipment"),
        ("SERA06", "Recorded music and music subscriptions"),
        ("SERAC", "Video and audio products"),
        ("SERAS", "Video and audio services"),
        ("SERB", "Pets, pet products and services"),
        ("SERB01", "Pets and pet products"),
        ("SERB02", "Pet services including veterinary"),
        ("SERC", "Sporting goods"),
        ("SERC01", "Sports vehicles including bicycles"),
        ("SERC02", "Sports equipment"),
        ("SERD", "Photography"),
        ("SERD01", "Photographic equipment and supplies"),
        ("SERD02", "Photographers and photo processing"),
        ("SERE", "Other recreational goods"),
        ("SERE01", "Toys"),
        ("SERE02", "Sewing machines, fabric and supplies"),
        ("SERE03", "Music instruments and accessories"),
        ("SERF", "Other recreation services"),
        (
            "SERF01",
            "Club membership for shopping clubs, fraternal, or other organizations, or participant sports fees",
        ),
        ("SERF02", "Admissions"),
        ("SERF03", "Fees for lessons or instructions"),
        ("SERG", "Recreational reading materials"),
        ("SERG01", "Newspapers and magazines"),
        ("SERG02", "Recreational books"),
        ("SETA", "New and used motor vehicles"),
        ("SETA01", "New vehicles"),
        ("SETA02", "Used cars and trucks"),
        ("SETA03", "Leased cars and trucks"),
        ("SETA04", "Car and truck rental"),
        ("SETB", "Motor fuel"),
        ("SETB01", "Gasoline (all types)"),
        ("SETB02", "Other motor fuels"),
        ("SETC", "Motor vehicle parts and equipment"),
        ("SETC01", "Tires"),
        ("SETC02", "Vehicle accessories other than tires"),
        ("SETD", "Motor vehicle maintenance and repair"),
        ("SETD01", "Motor vehicle body work"),
        ("SETD02", "Motor vehicle maintenance and servicing"),
        ("SETD03", "Motor vehicle repair"),
        ("SETE", "Motor vehicle insurance"),
        ("SETF", "Motor vehicle fees"),
        ("SETF01", "State motor vehicle registration and license fees"),
        ("SETF03", "Parking and other fees"),
        ("SETG", "Public transportation"),
        ("SETG01", "Airline fares"),
        ("SETG02", "Other intercity transportation"),
        ("SETG03", "Intracity transportation"),
    ]

    df_items = pd.DataFrame(data, columns=["item_code", "item_name"])
    return df_items


def download_bls_data(item_code):
    location_codes = get_bls_location_codes()
    item_codes = get_bls_item_codes()

    item_name = item_codes[item_codes["item_code"] == item_code]["item_name"].values[0]
    location_codes = location_codes[location_codes["area_type"] == "cbsa"]

    url = "https://api.bls.gov/publicAPI/v2/timeseries/data/"
    # registration_key = "f103513b4f004a30bc5b43f8e64cb6ac" # MIT email
    # registration_key = "83ba6f6ebe1a4d18865c08ca9c3ba16d" # gmail
    registration_key = "276f1ea467574e25a75c19955b1444d3"  # Benji MIT email

    data_dict = {
        "cbsa": [],
        "series_id": [],
        "series_name": [],
        "year": [],
        "period": [],
        "period_name": [],
        "value": [],
    }

    for location_code in location_codes["code"]:

        cbsa = location_codes[location_codes["code"] == location_code][
            "area_name"
        ].values[0]

        print(cbsa)

        for start_year in tqdm(range(1914, 2026, 10)):
            end_year = start_year + 9
            seriesid = f"CUUR{location_code}{item_code}"

            payload = {
                "registrationkey": registration_key,
                "seriesid": [seriesid],
                "startyear": start_year,
                "endyear": end_year,
                "calculations": True,
                "annualaverage": True,
            }
            r = requests.post(url, json=payload)
            data = r.json()

            if "series" in data["Results"]:
                for elem in data["Results"]["series"][0]["data"]:
                    data_dict["cbsa"].append(cbsa)
                    data_dict["series_id"].append(seriesid)
                    data_dict["series_name"].append(item_name)
                    data_dict["year"].append(elem["year"])
                    data_dict["period"].append(elem["period"])
                    data_dict["period_name"].append(elem["periodName"])
                    data_dict["value"].append(elem["value"])
            else:
                print("Request failed")
                print(data)

    return pd.DataFrame(data_dict)


# %%
items_to_download = ["SEHA"]  # ["SA0", "SAC", "SAD", "SAS"]
data_folder = os.path.join("..", "data", "inelastic-capital-data")

for item_code in items_to_download:
    data = download_bls_data(item_code)
    data.to_csv(
        os.path.join(data_folder, "raw", "bls", f"BLS_{item_code}.csv"),
        index=False,
    )


# %%
